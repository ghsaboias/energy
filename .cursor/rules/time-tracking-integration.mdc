---
alwaysApply: true
---

# Development Time Tracking Integration

## Phase Management Commands

Before starting any development work, establish time tracking:

```bash
# Start daily session
npm run time start daily "Brief description of today's goals"

# Start focused task work
npm run time start task "Specific task description"
```

After completing tasks:

```bash
# End current phase
npm run time end

# Check status and recommendations
npm run time status
```

## Development Methodology Integration

Follow the 3-tier development cycle from [docs/workflow-integration.md](mdc:docs/workflow-integration.md):

1. **Task (Tactical)** - Specific task execution
2. **Feature (Strategic)** - Feature development sprints
3. **Daily (Planning)** - Architectural decisions

## Auto-Documentation

- Task logs auto-created in `docs/task-log-YYYY-MM-DD.md`
- Update progress sections manually after `npm run time end`
- Reference [docs/workflow-integration.md](mdc:docs/workflow-integration.md) for full CLI usage

## Time Awareness

- Check `npm run time status` periodically for phase duration warnings
- Transition phases when recommended (60+ min for task, 4+ hours for feature)
- Use timing data to inform development velocity decisions

## CLI Integration Pattern

```bash
npm run time start task "Task name"
# Perform development work
npm run time end
# Update task log progress section
```

This enforces temporal discipline while providing development context and automated documentation.
